/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 purple_dragon.glb --transform 
Files: purple_dragon.glb [32.24MB] > D:\Code\Fiverr\anim-form\public\models\purple_dragon-transformed.glb [3.49MB] (89%)
Author: Kyan0s (https://sketchfab.com/kyan0s)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/enchanted-dark-dragon-59c1bf78e8b543299d2d68581d2e6c0d
Title: Enchanted Dark Dragon
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";

export function Model(props) {
  const { nodes, materials, animations } = useGLTF(
    "/models/purple_dragon-transformed.glb"
  );
  const group = useRef();
  let mixer, action;
  let clip = animations[0];
  let glideClip = THREE.AnimationUtils.subclip(clip, "glide", 135, 170);
  let flyClip = THREE.AnimationUtils.subclip(clip, "fly", 0, 105);
  let animSpeed = props.isPressed ? 0.01 : 0.003;

  const modelAnimations = () => {
    if (!mixer) mixer = new THREE.AnimationMixer(group.current);
    let clip = animations[0];

    action = mixer.clipAction(props.isPressed ? flyClip : glideClip);

    action.loop = props.isPressed ? THREE.LoopRepeat : THREE.LoopPingPong;
    action.fadeIn(0.2).play();
    mixer.update(animSpeed);
    updateMixer();
  };

  const updateMixer = () => {
    mixer.update(animSpeed);
    //add some wait

    requestAnimationFrame(updateMixer);
  };

  useEffect(() => {
    if (group.current) modelAnimations();
    console.log("group.current", group.current);
  }, [group.current, props.isPressed]);

  return (
    <group ref={group} {...props} dispose={null} position={[0, -1, -2.6]}>
      <group scale={0.7} name='Sketchfab_Scene' rotation={[-1.6, 1.1, 1.6]}>
        <primitive object={nodes.Armature_rootJoint} />
        <skinnedMesh
          name='Circle_0'
          geometry={nodes.Circle_0.geometry}
          material={materials.drgnHrn}
          skeleton={nodes.Circle_0.skeleton}
          position={[0, 2.3, -2.4]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.1}
          material-roughness={1}
          material-metalness={0}
        />
        <skinnedMesh
          name='mouth_0'
          geometry={nodes.mouth_0.geometry}
          material={materials.drgnMth}
          skeleton={nodes.mouth_0.skeleton}
          position={[0, 2.3, -2.4]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.1}
          material-roughness={1}
          material-metalness={0}
        />
        <skinnedMesh
          name='theeth_0'
          geometry={nodes.theeth_0.geometry}
          material={materials.drgnThht}
          skeleton={nodes.theeth_0.skeleton}
          position={[0, 2.3, -2.4]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.1}
          material-roughness={1}
          material-metalness={0}
        />
        <skinnedMesh
          name='HPCreature002_0'
          geometry={nodes.HPCreature002_0.geometry}
          material={materials.drgnClws}
          skeleton={nodes.HPCreature002_0.skeleton}
          position={[0, 2.3, -2.4]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.1}
          material-roughness={1}
          material-metalness={0}
        />
        <skinnedMesh
          name='HPCreature001_0'
          geometry={nodes.HPCreature001_0.geometry}
          material={materials.drgnSkn}
          skeleton={nodes.HPCreature001_0.skeleton}
          position={[0, 2.3, -2.4]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.1}
          material-roughness={1}
          material-metalness={0}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/purple_dragon-transformed.glb");
